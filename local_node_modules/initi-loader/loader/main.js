import getLoader from "../utils/getLoader.js";
import { refinePath, refineDependencies, loadedFileForBulk, load } from "./utils.cjs";

export default function initLoader(options) {
    const Loader = getLoader(options.loaderPath);
    class NewLoader extends Loader {
        load(path, callback, error, contentType) {
            if (!(error instanceof Function) && contentType === undefined) {
                contentType = error;
                error = undefined;
            }
            if (!(callback instanceof Function) && contentType === undefined) {
                contentType = callback;
                callback = undefined;
            }
            if (!contentType) {
                contentType = Loader.Type.js;
            }
            load.call(
                this,
                refinePath(path, contentType, this._baseUrl, this._typePaths, this._libs),
                callback,
                error,
                contentType,
                path,
            );
        }

        loadBulk(dependencies, callback, error) {
            const deps = refineDependencies(dependencies);
            const callbacks = [];
            let progress = {
                count: deps.length,
                callback: callback,
            };

            for (let i = 0; i < deps.length; ++i) {
                let element = deps[i];
                let elName = element.name;

                this._depsGraph.addNode(elName);

                let contentType = element.contentType;
                const depCallback = loadedFileForBulk.bind(this, elName, progress);
                callbacks.push(depCallback);

                this.load(elName, depCallback, error, contentType);
            }
        }
    }

    global.addEventListener = function () {};
    global.CanvasRenderingContext2D = {
        prototype: {},
    };

    const loader = new NewLoader(options.loaderConfig);

    loader.setTypePath(Loader.Type.js, "js");
    loader.setTypePath(Loader.Type.css, "styles");

    return {
        loader: loader,
        Loader: NewLoader,
    };
}
